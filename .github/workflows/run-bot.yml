name: Run Bot with cloudflared (Actions)

on:
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system deps (ffmpeg, jq, curl)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq curl

      - name: Install Python deps
        run: pip install -r requirements.txt

      - name: Download cloudflared
        run: |
          curl -L -o cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          chmod +x cloudflared

      - name: Start cloudflared tunnel and capture public URL
        id: tunnel
        run: |
          # start cloudflared in background and save log
          ./cloudflared tunnel --url http://localhost:8080 --no-autoupdate > cloudflared.log 2>&1 &
          echo "waiting for cloudflared to provide a url..."
          for i in $(seq 1 30); do
            sleep 1
            if grep -oE 'https?://[a-zA-Z0-9_.-]+(trycloudflare.com|trycloudflare)|(cfargotunnel.com)' cloudflared.log | head -n1 > public_url.txt; then
              break
            fi
          done
          if [ -s public_url.txt ]; then
            PUBLIC_URL=$(head -n1 public_url.txt)
            echo "PUBLIC_URL=$PUBLIC_URL" >> $GITHUB_ENV
            echo "Found public url: $PUBLIC_URL"
          else
            echo "No public url found. Dumping cloudflared.log:"
            tail -n +1 cloudflared.log
            exit 1
          fi

      - name: Show PUBLIC_URL
        run: echo "PUBLIC_URL is $PUBLIC_URL"

      - name: Run the bot
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          PUBLIC_URL: ${{ env.PUBLIC_URL }}
          PORT: "8080"
        run: python3 Script.py
