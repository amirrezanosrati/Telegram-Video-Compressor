name: Run Telegram File/Video Bot with cloudflared

on:
  workflow_dispatch:

jobs:
  run-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq curl unzip

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Download cloudflared
        run: |
          curl -L -o cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          chmod +x cloudflared

      - name: Start cloudflared tunnel and capture public URL
        id: tunnel
        run: |
          ./cloudflared tunnel --url http://localhost:8080 --no-autoupdate --loglevel debug > cloudflared.log 2>&1 &
          echo "waiting for cloudflared to provide a url (up to 120s)..."
          FOUND=""
          for i in $(seq 1 24); do   # 24 * 5s = 120s
            sleep 5
            # try to extract a trycloudflare url from the log
            GREP=$(grep -oE 'https?://[a-zA-Z0-9._-]+(trycloudflare.com|trycloudflare|cfargotunnel.com)' cloudflared.log | head -n1 || true)
            if [ -n "$GREP" ]; then
              FOUND="$GREP"
              break
            fi
            # also try the new cloudflared quick tunnel log format containing "url="
            GREP2=$(grep -oE 'url=[^ ]+' cloudflared.log | sed -n '1p' || true)
            if [ -n "$GREP2" ]; then
              FOUND=$(echo "$GREP2" | sed 's/^url=//')
              break
            fi
            echo "waiting... ($i)"
          done

          if [ -n "$FOUND" ]; then
            echo "Found public url: $FOUND"
            echo "PUBLIC_URL=$FOUND" >> $GITHUB_ENV
          else
            echo "No public url found after 120s. Dumping cloudflared.log:"
            tail -n 200 cloudflared.log || true
            exit 1
          fi

      - name: Show PUBLIC_URL
        run: echo "PUBLIC_URL is $PUBLIC_URL"

      - name: Run the bot
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          PUBLIC_URL: ${{ env.PUBLIC_URL }}
          PORT: "8080"
        run: python3 Script.py
